{"ast":null,"code":"var _jsxFileName = \"/Users/muhammadshahromali/GitHub/arakhne/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { storage } from \"./firebaseConfig\";\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State to store uploaded file\n  const [file, setFile] = useState(\"\");\n\n  // progress\n  const [percent, setPercent] = useState(0);\n\n  // Handle file upload event and update state\n  function handleChange(event) {\n    setFile(event.target.files[0]);\n  }\n  const handleUpload = () => {\n    if (!file) {\n      alert(\"Please upload an image first!\");\n    }\n    const storageRef = ref(storage, `/files/${file.name}`);\n\n    // progress can be paused and resumed. It also exposes progress updates.\n    // Receives the storage reference and the file to upload.\n    const uploadTask = uploadBytesResumable(storageRef, file);\n    uploadTask.on(\"state_changed\", snapshot => {\n      const percent = Math.round(snapshot.bytesTransferred / snapshot.totalBytes * 100);\n\n      // update progress\n      setPercent(percent);\n    }, err => console.log(err), () => {\n      // download url\n      getDownloadURL(uploadTask.snapshot.ref).then(url => {\n        console.log(url);\n      });\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"\\u2002\\u2002\\u2002\\u2002\\u2002\\u2002\\u2002\\u2002\\u2002\\u2002\\u2002\\u2002\", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleChange,\n      accept: \"/image/*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), \"\\u2002\\u2002\\u2002\\u2002\\u2002\\u2002\\u2002\\u2002\\u2002\\u2002\\u2002\\u2002\", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      children: \"Upload to Firebase\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), \"\\u2002\\u2002\\u2002\\u2002\\u2002\\u2002\\u2002\\u2002\\u2002\\u2002\\u2002\\u2002\", /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [percent, \" \\\"% done\\\"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), \"\\u2002\\u2002\\u2002\\u2002\\u2002\\u2002\\u2002\\u2002\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"bOkrlUcUescwzr7rsDyXiAnIW/A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","storage","ref","uploadBytesResumable","getDownloadURL","App","file","setFile","percent","setPercent","handleChange","event","target","files","handleUpload","alert","storageRef","name","uploadTask","on","snapshot","Math","round","bytesTransferred","totalBytes","err","console","log","then","url"],"sources":["/Users/muhammadshahromali/GitHub/arakhne/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport { storage } from \"./firebaseConfig\";\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n \nfunction App() {\n    // State to store uploaded file\n    const [file, setFile] = useState(\"\");\n \n    // progress\n    const [percent, setPercent] = useState(0);\n \n    // Handle file upload event and update state\n    function handleChange(event) {\n        setFile(event.target.files[0]);\n    }\n \n    const handleUpload = () => {\n        if (!file) {\n            alert(\"Please upload an image first!\");\n        }\n \n        const storageRef = ref(storage, `/files/${file.name}`);\n \n        // progress can be paused and resumed. It also exposes progress updates.\n        // Receives the storage reference and the file to upload.\n        const uploadTask = uploadBytesResumable(storageRef, file);\n \n        uploadTask.on(\n            \"state_changed\",\n            (snapshot) => {\n                const percent = Math.round(\n                    (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n                );\n \n                // update progress\n                setPercent(percent);\n            },\n            (err) => console.log(err),\n            () => {\n                // download url\n                getDownloadURL(uploadTask.snapshot.ref).then((url) => {\n                    console.log(url);\n                });\n            }\n        );\n    };\n \n    return (\n        <div>\n            <input type=\"file\" onChange={handleChange} accept=\"/image/*\" />\n            <button onClick={handleUpload}>Upload to Firebase</button>\n            <p>{percent} \"% done\"</p>\n        </div>\n    );\n}\n \nexport default App;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,GAAG,EAAEC,oBAAoB,EAAEC,cAAc,QAAQ,kBAAkB;AAAC;AAE7E,SAASC,GAAG,GAAG;EAAA;EACX;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACA,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;;EAEzC;EACA,SAASU,YAAY,CAACC,KAAK,EAAE;IACzBJ,OAAO,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EAClC;EAEA,MAAMC,YAAY,GAAG,MAAM;IACvB,IAAI,CAACR,IAAI,EAAE;MACPS,KAAK,CAAC,+BAA+B,CAAC;IAC1C;IAEA,MAAMC,UAAU,GAAGd,GAAG,CAACD,OAAO,EAAG,UAASK,IAAI,CAACW,IAAK,EAAC,CAAC;;IAEtD;IACA;IACA,MAAMC,UAAU,GAAGf,oBAAoB,CAACa,UAAU,EAAEV,IAAI,CAAC;IAEzDY,UAAU,CAACC,EAAE,CACT,eAAe,EACdC,QAAQ,IAAK;MACV,MAAMZ,OAAO,GAAGa,IAAI,CAACC,KAAK,CACrBF,QAAQ,CAACG,gBAAgB,GAAGH,QAAQ,CAACI,UAAU,GAAI,GAAG,CAC1D;;MAED;MACAf,UAAU,CAACD,OAAO,CAAC;IACvB,CAAC,EACAiB,GAAG,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,EACzB,MAAM;MACF;MACArB,cAAc,CAACc,UAAU,CAACE,QAAQ,CAAClB,GAAG,CAAC,CAAC0B,IAAI,CAAEC,GAAG,IAAK;QAClDH,OAAO,CAACC,GAAG,CAACE,GAAG,CAAC;MACpB,CAAC,CAAC;IACN,CAAC,CACJ;EACL,CAAC;EAED,oBACI;IAAA,WAAK,0EACD;MAAO,IAAI,EAAC,MAAM;MAAC,QAAQ,EAAEnB,YAAa;MAAC,MAAM,EAAC;IAAU;MAAA;MAAA;MAAA;IAAA,QAAG,4EAC/D;MAAQ,OAAO,EAAEI,YAAa;MAAA,UAAC;IAAkB;MAAA;MAAA;MAAA;IAAA,QAAS,4EAC1D;MAAA,WAAIN,OAAO,EAAC,aAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QAAI,oDAC7B;EAAA;IAAA;IAAA;IAAA;EAAA,QAAM;AAEd;AAAC,GAlDQH,GAAG;AAAA,KAAHA,GAAG;AAoDZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}